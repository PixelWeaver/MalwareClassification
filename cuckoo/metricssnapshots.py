import logging
import threading
import time
import psutil
import os.path
import json

from lib.common.abstracts import Auxiliary
from lib.common.results import upload_to_host

log = logging.getLogger(__name__)

SHOT_DELAY = 1


class MetricsSnapshots(threading.Thread, Auxiliary):

    def __init__(self, options={}, analyzer=None):
        threading.Thread.__init__(self)
        Auxiliary.__init__(self, options, analyzer)
        self.do_run = True

        self.metrics = []

        self.filepath = os.path.join(self.analyzer.path, "bin", "metrics.json")
        log.info("Successfully started MetricsSnapshots.")

    def stop(self):
        """Stop snapshotting."""
        try:
            with open(self.filepath, 'w') as f:
                json.dump(self.metrics, f, sort_keys=True, indent=4, separators=(',', ': '))
            upload_to_host(self.filepath, 'files/metrics.json')
            log.info("Successfully uploaded metrics to host.")
        except BaseException as e:
            log.info("An error occured when logging results : " + e.str())
            self.do_run = False

    def gather_metrics(self):
        self.metrics.append(
            (
                psutil.cpu_times_percent(),
                psutil.virtual_memory(),
                psutil.swap_memory(),
                psutil.disk_io_counters(),
                psutil.net_io_counters(),
                psutil.pids()
            ))

    def run(self):
        """Run snapshotting."""

        while self.do_run:
            self.gather_metrics()
            time.sleep(SHOT_DELAY)
